

   let stompClient = null;
    let playerName = "";
    let playerColor = "";
    let gameStarted = false;
    let selectedCellId = "";
    let is_spectator = true;

    function connect() {
        const socket = new SockJS('/game');
        stompClient = Stomp.over(socket);
        stompClient.connect({}, function (frame) {
            console.log('Connected: ' + frame);

            stompClient.subscribe('/topic/join', function (message) {
                const data = JSON.parse(message.body);
                console.log('Players update:', data);

                updatePlayersList(data.players);
                gameStarted = data.gameStarted;
                updateStatus();

                if (gameStarted) {
                    document.getElementById('map').style.pointerEvents = 'auto';
                    document.getElementById('puzzle-panel').style.display = 'none';
                } else {
                    document.getElementById('map').style.pointerEvents = 'none';
                }
            });

            stompClient.subscribe('/topic/game', function (message) {
                const data = JSON.parse(message.body);
                console.log('Cell update:', data);
                colorCell(data.code, data.playerName);
            });
        });
    }

    function connectSpectator() {
        const socket = new SockJS('/game');
        stompClient = Stomp.over(socket);
        stompClient.connect({}, function (frame) {
            console.log('Connected as spectator: ' + frame);

            stompClient.subscribe('/topic/join', function (message) {
                const data = JSON.parse(message.body);
                console.log('Players update (spectator):', data);

                updatePlayersList(data.players);
                gameStarted = data.gameStarted;
                updateStatus();

                document.getElementById('map').style.pointerEvents = 'none';
                document.getElementById('puzzle-panel').style.display = 'none';
            });

            stompClient.subscribe('/topic/game', function (message) {
                const data = JSON.parse(message.body);
                console.log('Cell update (spectator):', data);
                colorCell(data.code, data.playerName);
            });
        });
    }

    function joinGame() {
        playerName = document.getElementById('nameInput').value.trim();
        if (playerName === "") {
            alert("Please enter a name.");
            return;
        }

        stompClient.send("/app/join", {}, JSON.stringify({ playerName: playerName }));
        document.getElementById('join-section').style.display = 'none';
    }

    function updatePlayersList(players) {
        const playersDiv = document.getElementById('players');
        playersDiv.innerHTML = "<strong>Players:</strong><br>";
        for (const name in players) {
            const color = players[name].color;
            playersDiv.innerHTML += `${name} (${color})<br>`;
            if (name === playerName) {
                playerColor = color;
            }
        }
    }

    function updateStatus() {
        const statusDiv = document.getElementById('status');
        if (!gameStarted) {
            statusDiv.innerHTML = "Waiting for another player to join...";
        } else {
            if (is_spectator) {
                statusDiv.innerHTML = `Game Started! Enjoy watching!!`;
            } else {
                statusDiv.innerHTML = `Game Started! Your color: ${playerColor}`;
            }
        }
    }

    function buildMap() {
        const mapDiv = document.getElementById('map');
        mapDiv.innerHTML = "";
        for (let i = 0; i < 25; i++) {
            const cellId = 'cell-' + i;
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.id = cellId;

            const span = document.createElement('span');
            span.innerText = i;
            cell.appendChild(span);

            cell.addEventListener('click', function() {
                if (!gameStarted) return;

                const currentBg = cell.style.backgroundColor;
                const isConquered = currentBg && currentBg !== 'lightgray' && currentBg !== '';

                if (isConquered) {
                    alert("This cell is already conquered!");
                    return;
                }

                selectedCellId = cellId;
                showPuzzle(cellId);
            });

            mapDiv.appendChild(cell);
        }
    }

    function showPuzzle(cellId) {
        document.getElementById('puzzle-title').innerText = `Puzzle for ${cellId}`;
        document.getElementById('puzzle-answer').value = '';
        document.getElementById('puzzle-panel').style.display = 'block';
    }

    function submitAnswer() {
        const answer = document.getElementById('puzzle-answer').value.trim();
        if (answer === "") {
            alert("Please enter an answer.");
            return;
        }

        stompClient.send("/app/select", {}, JSON.stringify({
            playerName: playerName,
            code: selectedCellId
        }));

        document.getElementById('puzzle-panel').style.display = 'none';
    }

    function colorCell(cellId, ownerName) {
        const cell = document.getElementById(cellId);
        if (!cell) return;

        let color = "gray";
        if (ownerName === playerName) {
            color = playerColor;
        } else {
            const playersDiv = document.getElementById('players').innerText;
            const regex = new RegExp(`${ownerName} \\((.*?)\\)`);
            const match = playersDiv.match(regex);
            if (match) {
                color = match[1];
            }
        }

        if (color.toLowerCase() === 'red') {
            cell.style.backgroundColor = '#ff0040';
            cell.style.borderColor = '#ff0040';
            cell.style.boxShadow = '0 0 20px rgba(255, 0, 64, 0.6), inset 0 0 20px rgba(255, 0, 64, 0.2)';
        } else if (color.toLowerCase() === 'blue') {
            cell.style.backgroundColor = '#0080ff';
            cell.style.borderColor = '#0080ff';
            cell.style.boxShadow = '0 0 20px rgba(0, 128, 255, 0.6), inset 0 0 20px rgba(0, 128, 255, 0.2)';
        } else {
            cell.style.backgroundColor = color;
        }

        if (selectedCellId === cellId) {
            document.getElementById('puzzle-panel').style.display = 'none';
            selectedCellId = "";
        }
    }

    function closeModal() {
        const modal = document.getElementById('roleModal');
        modal.classList.add('closing');
        setTimeout(() => {
            modal.style.display = "none";
            modal.classList.remove('closing');
        }, 300);
    }

    window.onload = function () {
        document.getElementById('roleModal').style.display = "block";

        document.getElementById('playerButton').addEventListener('click', function() {
            is_spectator = false;
            closeModal();
            setTimeout(() => {
                initGame();
            }, 300);
        });

        document.getElementById('spectatorButton').addEventListener('click', function() {
            is_spectator = true;
            closeModal();
            setTimeout(() => {
                initGame();
            }, 300);
        });
    };

    function initGame() {
        buildMap();
        const statusDiv = document.getElementById('status');

        statusDiv.innerHTML = "Waiting for the players player to join...";
        if (is_spectator) {
            connectSpectator();
            document.getElementById('join-section').style.display = 'none';
        } else {
            connect();
            document.getElementById('join-section').style.display = 'block';
        }
    }